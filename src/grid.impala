

// Legacy Structures
static EDGE = 0 as u32;
static VERT = 1 as u32;
static CELL = 2 as u32;

struct GridConnectivity {
  src_count : u32,
  trg_count : u32,
  matrix : &[u32]
};

struct LatLonRad {
  lat : f64,
  lon : f64
};

struct Grid {
  counts : [u32 * 3],
  connectivities : [[&GridConnectivity * 3] * 3],
  coordinates : [&LatLonRad * 3]
};

struct GridSubset {
  count : u32,
  indices : &[u32],
  grid : &Grid,
  entity : u32
};


// Data accessor abstractions
struct GridConnectivityView {
  src_count : fn() -> i32,
  trg_count : fn() -> i32,
  matrix : fn(u32) -> u32
};

struct SubsetIterator {
  output_pos : u32,
  entity_idx : i32,
  level_idx : u32,
  level_count : u32,
  trg_count : i32,

  out_idx : fn() -> u32
};

fn @mk_subset_iterator(output_pos : u32, entity_idx : i32, level_idx : u32,
                       level_count : u32, trg_count : i32) -> SubsetIterator {
  SubsetIterator {
    output_pos : output_pos,
    entity_idx : entity_idx,
    level_idx : level_idx,
    level_count : level_count,
    trg_count : trg_count,

    out_idx : @|| output_pos + (level_idx as u32)
  }
}

struct GridSubsetView {
  count : fn() -> i32,
  indices : fn(i32) -> u32,

  // At the moment, grid and entity are not needed

  iterate : fn(u32, i32, fn(SubsetIterator) -> ()) -> ()
};

struct GenericView {
  read : fn(u32) -> f64,
  write : fn(u32, f64) -> (),

  buf : Buffer
};
struct GenericU32View {
  read : fn(u32) -> u32
};


fn @mk_iter_over_grid_subset(buf : GenericU32View, subset : &GridSubset) -> (fn(u32, i32, fn(SubsetIterator) -> ()) -> ()) {
  let count = subset.count as i32;

  @|lv_count,trg_count,body| {
    for output_idx in outer_loop(0, count as i32) {
      let entity_idx = (buf.read(output_idx as u32) as i32) * trg_count;
      for level_idx in inner_loop(0, lv_count as i32) {
        @@body(mk_subset_iterator((output_idx as u32) * lv_count, entity_idx, level_idx as u32,
                                  lv_count, trg_count))
      }
    }
  }
}


struct IterInfo {
  connectivity : GridConnectivityView,
  subset : GridSubsetView,
  values : GenericView,
  weights : GenericView,
  output : GenericView
};

fn @handle_io(out : &mut[f64], sub : &GridSubset, conn : &GridConnectivity,
              vals : &[f64], wghts : &[f64], level_count : u32)
              -> (IterInfo, u32)
{
  let connectivity = connectivity_to_device(conn);
  let subset = subset_to_device(sub);
  let values = values_to_device(sub.grid.counts(EDGE) * level_count, vals);
  let weights = values_to_device(sub.grid.counts(CELL) * sub.grid.connectivities(CELL)(EDGE).trg_count, wghts);

  let output_size = sub.grid.counts(CELL) * level_count;
  let output = output_of_device(output_size, out);

  (IterInfo {
    connectivity : connectivity,
    subset : subset,
    values : values,
    weights : weights,
    output : output
  },
  output_size)
}

fn @fetch_data(info : IterInfo, iter : SubsetIterator,
               body : fn(f64,f64) -> ()) -> () {
  for connect_idx in unroll(0, iter.trg_count) {
    let flat_connect_idx = (iter.entity_idx + connect_idx) as u32;
    let flat_values_idx = info.connectivity.matrix(flat_connect_idx) * iter.level_count
                        + (iter.level_idx as u32);

    @@body(info.values.read(flat_values_idx as u32), info.weights.read(flat_connect_idx as u32));
  }
}
