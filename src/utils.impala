
extern "C" { fn create_bench_array(size : u32) -> &mut[i64]; }
extern "C" { fn "anydsl_is_profiling" is_profiling() -> int; }

static mut total_kernel_timing = 0i64;
static mut total_cpu_timing = 0i64;

fn @benchmark(get_time: fn() -> i64, num_iter: i32, body: fn() -> (), sync: fn() -> ()) -> i64 {
  if is_profiling() != 0 {
    body();
    0 as i64
  }
  else {
    let times = create_bench_array((num_iter as i64 * sizeof[i64]()) as u32);
    for i in range(0, num_iter) {
        let start = get_time();
        body();
        sync();
        times(i) = get_time() - start;
    }
    sort_i64(num_iter, times);
    print_string("Timing: ");
    print_f64(times(num_iter/2) as f64 / 1000.0);
    print_string(" | ");
    print_f64(times(0) as f64 / 1000.0);
    print_string(" | ");
    print_f64(times(num_iter-1) as f64 / 1000.0);
    print_string(" (median(");
    print_i32(num_iter);
    print_string(") | minimum | maximum) ms\n");
    let median = times(num_iter/2);
    median
  }
}

static iter_acc = 250;
static iter_cpu = 250;
fn @benchmark_acc(acc: Accelerator, body: fn() -> ()) -> () { total_kernel_timing += benchmark(get_kernel_time, iter_acc, body, acc.sync) }
fn @benchmark_cpu(                  body: fn() -> ()) -> () { total_cpu_timing    += benchmark(get_micro_time,  iter_cpu, body, ||) }

fn @is_gpu() -> bool { is_nvvm() | is_cuda() | is_opencl() | is_amdgpu() }

fn print_total_timing() -> () {
  print_string("Total timing for cpu / kernel: ");
  print_f64(total_cpu_timing as f64 / 1000.0);
  print_string(" / ");
  print_f64(total_kernel_timing as f64 / 1000.0);
  print_string(" ms\n")
}

fn @(?num) sort_i64(num: i32, arr: &mut[i64]) -> () {
  // insertion sort
  for i in range(1, num) {
    let x = arr(i);
    let mut j = i;
    while j > 0 && arr(j-1) > x {
      arr(j) = arr(j-1);
      j = j - 1;
    }
    arr(j) = x;
  }
}
fn @(?num) sort_f32(num: i32, arr: &mut[f32]) -> () {
  // insertion sort
  for i in range(1, num) {
    let x = arr(i);
    let mut j = i;
    while j > 0 && arr(j-1) > x {
      arr(j) = arr(j-1);
      j = j - 1;
    }
    arr(j) = x;
  }
}
